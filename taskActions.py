from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from redmine import getRedmine, getUser

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
def getIssueText(issue):
    trackerIcons = {
        "BUG": "üêû",
        "FEAT": "üí°",
        "–ó–∞—è–≤–∫–∞": "‚ùî"
    }
    tracker = trackerIcons.get(issue.tracker.name, issue.tracker.name)
    number = issue.id
    status = issue.status.name
    priority = issue.priority.name
    version = issue.fixed_version.name if hasattr(issue, 'fixed_version') else '–ë–µ–∑ –≤–µ—Ä—Å–∏–∏'
    return (f"<b>{tracker} {number}</b>: {status} (<b>{priority}</b>) | <b>{version}</b>\n\n"
            f"{issue.subject}\n")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∏
async def sendIssue(issue, message, bot):
    status = issue.status.name
    text = getIssueText(issue)
    common = [
        InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', None, callback_data=f'details:{issue.id}'),
        InlineKeyboardButton('–ö –∑–∞–¥–∞—á–µ', url=f'https://redmine.tech.rightstep.ru/issues/{issue.id}')
    ]
    actions = []
    if status in ["–ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–ù–æ–≤—ã–π", "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π"]:
        actions.append(InlineKeyboardButton('–í —Ä–∞–±–æ—Ç—É', None, callback_data=f'toWork:{issue.id}'))
    if status == "–í —Ä–∞–±–æ—Ç–µ":
        actions.append(InlineKeyboardButton('–í —Ç–µ—Å—Ç', None, callback_data=f'toTest:{issue.id}'))
        actions.append(InlineKeyboardButton('–ö —Å–±–æ—Ä–∫–µ (Front)', None, callback_data=f'toAssembly:{issue.id}'))
        
    markup = InlineKeyboardMarkup([common, actions])

    await bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="html")

# –ù–µ—Ç –∑–∞–¥–∞—á –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
async def sendHasNoIssues(chatID, bot):
    text = "–Ø –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É ü§∑‚Äç‚ôÇÔ∏è"
    return await bot.send_message(chatID, text)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def deleteMessage(call, bot):
    splited = call.data.split(':')
    chatID = int(splited[1])
    messageID = call.message.id
    await bot.answer_callback_query(call.id, "–°–∫—Ä—ã–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è ‚ù§Ô∏è")
    await bot.delete_message(chatID, messageID)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def showDetails(call, bot):
    chatID = call.message.chat.id
    redmine = getRedmine(chatID)
    issueId = int(call.data.split(':')[1])
    issue = redmine.issue.get(issueId)
    text = issue.description
    markup = InlineKeyboardMarkup([[InlineKeyboardButton('–°–∫—Ä—ã—Ç—å', None, callback_data=f'deleteMessage:{chatID}')]])
    await bot.reply_to(call.message, text, reply_markup=markup, parse_mode='html')

# –ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –∑–∞–¥–∞—á –≤ –≤–µ—Ä—Å–∏–∏
async def showTasksByVersion(call, bot):
    chatID = call.message.chat.id
    redmine = getRedmine(chatID)
    user = getUser(chatID)

    versionID = call.data.split(':')[1]
    issues = redmine.issue.filter(assigned_to_id=user.id)
    issuesInVersion = []
    
    if versionID == 'null':
        issuesInVersion = list(filter(lambda issue: not hasattr(issue, 'fixed_version'), list(issues)))
    else:
        issuesInVersion = list(filter(lambda issue: issue.fixed_version.id == int(versionID) if hasattr(issue, 'fixed_version') else False, list(issues)))
    
    if len(issuesInVersion) == 0:
        return await sendHasNoIssues(chatID, bot)

    for issue in issuesInVersion:
        await sendIssue(issue, call.message, bot)

# –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É
async def toWork(call, bot):
    redmine = getRedmine(call.message.chat.id)
    issueId = int(call.data.split(':')[1])
    # 2 - id —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"
    redmine.issue.update(issueId, status_id=2)
    issue = redmine.issue.get(issueId)
    text = f'–ì–æ—Ç–æ–≤–æ! –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, —Å–∫–æ—Ä–µ–µ –∑–∞ –¥–µ–ª–æ! üê±'
    await bot.reply_to(call.message, text)
    await sendIssue(issue, call.message, bot)

# –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def toTest(call, bot):
    redmine = getRedmine(call.message.chat.id)
    issueId = int(call.data.split(':')[1])
    issue = redmine.issue.get(issueId)
    
    custom_fields = list(issue.custom_fields.values())
    for field in custom_fields:
        if field["name"] == '–ö —Å–±–æ—Ä–∫–µ':
            field["value"] = 1

    redmine.issue.update(issueId,
        # 9 - id —Å—Ç–∞—Ç—É—Å "–¢–µ—Å—Ç"
        status_id=9,
        assigned_to_id=issue.author.id,
        done_ratio=100,
        notes="–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        custom_fields=custom_fields
    )

    text = f'–°—É–ø–µ—Ä! –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ü•∞'
    await bot.reply_to(call.message, text)

async def toAssembly(call, bot):
    redmine = getRedmine(call.message.chat.id)
    issueId = int(call.data.split(':')[1])
    issue = redmine.issue.get(issueId)
    # 60 - id –ó–∏–º–∏–Ω–∞ –ê–ª–µ–∫—Å–µ—è
    user = redmine.user.get(60)

    custom_fields = list(issue.custom_fields.values())
    for field in custom_fields:
        if field["name"] == '–ö —Å–±–æ—Ä–∫–µ':
            field["value"] = 1

    redmine.issue.update(issueId,
        # 9 - id —Å—Ç–∞—Ç—É—Å "–¢–µ—Å—Ç"
        status_id=9,
        assigned_to_id=user.id,
        done_ratio=100,
        notes="–í—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–æ—à—É –≤–∫–ª—é—á–∏—Ç—å –≤ —Å–±–æ—Ä–∫—É",
        custom_fields=custom_fields
    )

    text = f'–°–ø–∞—Å–∏–±–æ! –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–±–æ—Ä–∫—É ü´Ç'
    await bot.reply_to(call.message, text)