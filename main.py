# msg = ("Ready, take a look:\n<b>"
#                f"Name: {data['name']}\n"
#                f"Surname: {data['surname']}\n"
#                f"Age: {message.text}</b>")
#         bot.send_message(message.chat.id, msg, parse_mode="html")

import asyncio
import telegram
from telebot.async_telebot import AsyncTeleBot
from redminelib import Redmine
from telebot import types, asyncio_filters

from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage

bot = AsyncTeleBot(telegram.token, state_storage=StateMemoryStorage())


class MyStates(StatesGroup):
    username = State()
    password = State()


redmine = None
project = None
user = None


def setRedmine(username, password):
    global redmine
    global project
    global user
    redmine = Redmine('https://redmine.tech.rightstep.ru/',
                      username=username, password=password)
    user = redmine.auth()
    project = redmine.project.get('scmo-3-x')

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


@bot.message_handler(commands=['start', 'login'])
async def send_welcome(message):
    await bot.set_state(message.from_user.id, MyStates.username, message.chat.id)
    await bot.send_message(message.chat.id, """\
–ü—Ä–∏–≤–µ—Ç!
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ <b>Redmine</b>.
–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –≤–æ–π–¥—ë–º –≤ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç üòé\n
<b>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω</b>, —á—Ç–æ–±—ã –º—ã –Ω–∞—á–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ‚úåÔ∏è
\
""", parse_mode="html")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞


@bot.message_handler(state=MyStates.username)
async def username_set(message):
    """
    –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ username
    """
    text = ("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å <b>–≤–≤–æ–¥–∏ –ø–∞—Ä–æ–ª—å</b> –∏ —è –∞–≤—Ç–æ—Ä–∏–∑—É—é —Ç–µ–±—è üëå\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—é üòâ")
    await bot.send_message(message.chat.id, text, parse_mode="html")
    await bot.set_state(message.from_user.id, MyStates.password, message.chat.id)
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['username'] = message.text

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è


@bot.message_handler(state=MyStates.password)
async def password_set(message):
    global redmine
    """
    –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ password
    """
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        setRedmine(data['username'], message.text)
        text = ("–ë–ª–µ—Å—Ç—è—â–µ, —Ç–µ–ø–µ—Ä—å —Ç—ã <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b>! üòç\n–ü–æ—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏?")
        markup = types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton(
                '–ú–æ–∏ –∑–∞–¥–∞—á–∏', None, callback_data='/mytasks')
        ]])
        await bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="html")
        await bot.delete_state(message.from_user.id, message.chat.id)


# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@bot.message_handler(commands=['mytasks'])
async def send_tasks(message):
    global user
    issues = redmine.issue.filter(assigned_to_id=user.id)
    await bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á:")

    async def sendIssue(issue):
        text = f'*{issue.id}*: {issue.subject}'
        url = f'https://redmine.tech.rightstep.ru/issues/{issue.id}'
        markup = types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton(
                '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', None, callback_data=issue.id),
            types.InlineKeyboardButton('–ö –∑–∞–¥–∞—á–µ', url=url)
        ]])
        await bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='Markdown')

    for issue in issues:
        await sendIssue(issue)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∑–∞–¥–∞—á–µ–π


@bot.callback_query_handler(func=None)
async def back_callback(call: types.CallbackQuery):
    if call.data == '/mytasks':
        return await send_tasks(call.message)

    global redmine
    issue = redmine.issue.get(int(call.data))
    text = issue.description
    # text = '\n'.join([f'{issue.id}: {issue.subject}', issue.description])
    # text = '\n'.join([issue.id, issue.subject, issue.description])
    await bot.reply_to(call.message, text, parse_mode='Markdown')

bot.add_custom_filter(asyncio_filters.StateFilter(bot))
asyncio.run(bot.polling())
