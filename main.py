import os
import asyncio
import sotrings
# import telegram
import taskActions
from redmine import setRedmine, getProject, getIssues, useNotificator 
from telebot.async_telebot import AsyncTeleBot
from telebot import types, asyncio_filters
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage

bot = AsyncTeleBot(os.environ.get('TELEGRAM'), state_storage=StateMemoryStorage())
class MyStates(StatesGroup):
    username = State()
    password = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start', 'login'])
async def send_welcome(message):
    await bot.set_state(message.from_user.id, MyStates.username, message.chat.id)
    await bot.send_message(message.chat.id, """\
–ü—Ä–∏–≤–µ—Ç!
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ <b>Redmine</b>.
–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –≤–æ–π–¥—ë–º –≤ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç üòé\n
<b>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω</b>, —á—Ç–æ–±—ã –º—ã –Ω–∞—á–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ‚úåÔ∏è
\
""", parse_mode="html")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
@bot.message_handler(state=MyStates.username)
async def username_set(message):
    """
    –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ username
    """
    text = ("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å <b>–≤–≤–æ–¥–∏ –ø–∞—Ä–æ–ª—å</b> –∏ —è –∞–≤—Ç–æ—Ä–∏–∑—É—é —Ç–µ–±—è üëå\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—é üòâ")
    await bot.send_message(message.chat.id, text, parse_mode="html")
    await bot.set_state(message.from_user.id, MyStates.password, message.chat.id)
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['username'] = message.text

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
@bot.message_handler(state=MyStates.password)
async def password_set(message):
    """
    –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ password
    """
    chatID = message.chat.id
    async with bot.retrieve_data(message.from_user.id, chatID) as data:
        try:
            setRedmine(chatID, data['username'], message.text)
            text = (f"–ë–ª–µ—Å—Ç—è—â–µ, —Ç–µ–ø–µ—Ä—å —Ç—ã <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b>! üòç\n"
                    f"–ü–æ—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏?")
            markup = types.InlineKeyboardMarkup([[
                types.InlineKeyboardButton('–ó–∞–¥–∞—á–∏ –Ω–∞ –º–Ω–µ', None, callback_data='/mytasks'),
                types.InlineKeyboardButton('–ü–æ –≤–µ—Ä—Å–∏–∏', None, callback_data='/tasks')
            ]])
            await bot.send_message(chatID, text, reply_markup=markup, parse_mode="html")
            await bot.delete_state(message.from_user.id, chatID)
            await useNotificator(chatID, bot)
        except:
            text = (f"–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω—ã–µ <b>–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–æ—à–ª–∏</b>...ü•≤\n"
                    f"–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. <b>–í–≤–æ–¥–∏ –ª–æ–≥–∏–Ω</b> ü§û")
            await bot.set_state(message.from_user.id, MyStates.username, chatID)
            await bot.send_message(chatID, text, parse_mode="html")


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
@bot.message_handler(commands=['mytasks'])
async def sendMyTasks(message):
    chatID = message.chat.id
    issues = getIssues(chatID)
    issuesByVersion = sorted(issues, key=sotrings.sortByVersion)
    if len(issuesByVersion) == 0:
        return await taskActions.sendHasNoIssues(chatID, bot)
    
    await bot.send_message(chatID, "–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á:")
    for issue in issuesByVersion:
        await taskActions.sendIssue(issue, message.chat.id, bot) 

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ –≤–µ—Ä—Å–∏–∏
@bot.message_handler(commands=['tasks'])
async def sendTasks(message):
    project = getProject(message.chat.id)
    versions = list(filter(lambda version: version.status == 'open', list(project.versions)))
    text = "–ó–∞–¥–∞—á–∏ –∫–∞–∫–æ–π –∏–∑ –≤–µ—Ä—Å–∏–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? üßê"
    buttons = [types.InlineKeyboardButton('–ë–µ–∑ –≤–µ—Ä—Å–∏–∏', None, callback_data=f'showTasksByVersion:null')]

    for version in versions:
        buttons.append(types.InlineKeyboardButton(version.name, None, callback_data=f'showTasksByVersion:{version.id}'))
    markup = types.InlineKeyboardMarkup([buttons])
    await bot.send_message(message.chat.id, text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∑–∞–¥–∞—á–µ–π
@bot.callback_query_handler(func=None)
async def back_callback(call: types.CallbackQuery):
    if call.data == '/mytasks':
        return await sendMyTasks(call.message)
    if call.data == '/tasks':
        return await sendTasks(call.message)
    if call.data.startswith('deleteMessage'):
        return await taskActions.deleteMessage(call, bot)

    if call.data.startswith('details'):
        return await taskActions.showDetails(call, bot)
    if call.data.startswith('showTasksByVersion'):
        return await taskActions.showTasksByVersion(call, bot)
    if call.data.startswith('toWork'):
        return await taskActions.toWork(call, bot)
    if call.data.startswith('toAssembly'):
        return await taskActions.toAssembly(call, bot)
    if call.data.startswith('toTest'):
        return await taskActions.toTest(call, bot)


bot.add_custom_filter(asyncio_filters.StateFilter(bot))
    
asyncio.run(bot.polling())