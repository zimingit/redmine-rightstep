# msg = ("Ready, take a look:\n<b>"
#                f"Name: {data['name']}\n"
#                f"Surname: {data['surname']}\n"
#                f"Age: {message.text}</b>")
#         bot.send_message(message.chat.id, msg, parse_mode="html")

import asyncio
import telegram
import sotrings
from telebot.async_telebot import AsyncTeleBot
from redminelib import Redmine
from telebot import types, asyncio_filters

from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage

bot = AsyncTeleBot(telegram.token, state_storage=StateMemoryStorage())
class MyStates(StatesGroup):
    username = State()
    password = State()

redmine = None
project = None
user = None

def setRedmine(username, password):
    global redmine
    global project
    global user
    redmine = Redmine('https://redmine.tech.rightstep.ru/',
                      username=username, password=password)
    user = redmine.auth()
    project = redmine.project.get('scmo-3-x')

def getIssueText(issue):
    trackerIcons = {
        "BUG": "üêû",
        "FEAT": "üí°",
        "–ó–∞—è–≤–∫–∞": "‚ùî"
    }
    tracker = trackerIcons.get(issue.tracker.name, issue.tracker.name)
    number = issue.id
    status = issue.status.name
    priority = issue.priority.name
    version = issue.fixed_version.name if hasattr(issue, 'fixed_version') else '–ë–µ–∑ –≤–µ—Ä—Å–∏–∏'
    return (f"<b>{tracker} {number}</b>: {status} (<b>{priority}</b>) | <b>{version}</b>\n\n"
            f"{issue.subject}\n")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start', 'login'])
async def send_welcome(message):
    await bot.set_state(message.from_user.id, MyStates.username, message.chat.id)
    await bot.send_message(message.chat.id, """\
–ü—Ä–∏–≤–µ—Ç!
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ <b>Redmine</b>.
–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –≤–æ–π–¥—ë–º –≤ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç üòé\n
<b>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω</b>, —á—Ç–æ–±—ã –º—ã –Ω–∞—á–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ‚úåÔ∏è
\
""", parse_mode="html")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
@bot.message_handler(state=MyStates.username)
async def username_set(message):
    """
    –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ username
    """
    text = ("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å <b>–≤–≤–æ–¥–∏ –ø–∞—Ä–æ–ª—å</b> –∏ —è –∞–≤—Ç–æ—Ä–∏–∑—É—é —Ç–µ–±—è üëå\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—é üòâ")
    await bot.send_message(message.chat.id, text, parse_mode="html")
    await bot.set_state(message.from_user.id, MyStates.password, message.chat.id)
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['username'] = message.text

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
@bot.message_handler(state=MyStates.password)
async def password_set(message):
    global redmine
    """
    –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ password
    """
    async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        try:
            setRedmine(data['username'], message.text)
            text = (f"–ë–ª–µ—Å—Ç—è—â–µ, —Ç–µ–ø–µ—Ä—å —Ç—ã <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b>! üòç\n"
                    f"–ü–æ—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏?")
            markup = types.InlineKeyboardMarkup([[
                types.InlineKeyboardButton(
                    '–ú–æ–∏ –∑–∞–¥–∞—á–∏', None, callback_data='/mytasks')
            ]])
            await bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="html")
            await bot.delete_state(message.from_user.id, message.chat.id)
        except:
            text = (f"–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω—ã–µ <b>–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–æ—à–ª–∏</b>...ü•≤\n"
                    f"–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. <b>–í–≤–æ–¥–∏ –ª–æ–≥–∏–Ω</b> ü§û")
            await bot.set_state(message.from_user.id, MyStates.username, message.chat.id)
            await bot.send_message(message.chat.id, text, parse_mode="html")



# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@bot.message_handler(commands=['mytasks'])
async def sendTasks(message):
    global user
    issues = redmine.issue.filter(assigned_to_id=user.id)
    await bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á:")
    # issue.fixed_version
    async def sendIssue(issue):
        status = issue.status.name
        text = getIssueText(issue)

        buttons = [types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', None, callback_data=f'details:{issue.id}')]
        if status in ["–ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–ù–æ–≤—ã–π", "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π"]:
            buttons.append(types.InlineKeyboardButton('–í —Ä–∞–±–æ—Ç—É', None, callback_data=f'toWork:{issue.id}'))
        if status == "–í —Ä–∞–±–æ—Ç–µ":
            buttons.append(types.InlineKeyboardButton('–í —Ç–µ—Å—Ç', None, callback_data=f'toTest:{issue.id}'))
        buttons.append(types.InlineKeyboardButton('–ö –∑–∞–¥–∞—á–µ', url=f'https://redmine.tech.rightstep.ru/issues/{issue.id}'))

        markup = types.InlineKeyboardMarkup([buttons])

        await bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="html")

    issuesByVersion = sorted(issues, key=sotrings.sortByVersion)
    for issue in issuesByVersion:
        await sendIssue(issue)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∑–∞–¥–∞—á–µ–π
@bot.callback_query_handler(func=None)
async def back_callback(call: types.CallbackQuery):
    if call.data == '/mytasks':
        return await sendTasks(call.message)
    
    async def showDetails(call):
        global redmine
        issueId = int(call.data.split(':')[1])
        issue = redmine.issue.get(issueId)
        text = issue.description
        await bot.reply_to(call.message, text, parse_mode='html')

    async def toWork(call):
        global redmine
        issueId = int(call.data.split(':')[1])
        # 2 - id —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"
        redmine.issue.update(issueId, status_id=2)
        text = f'–ì–æ—Ç–æ–≤–æ! –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, —Å–∫–æ—Ä–µ–µ –∑–∞ –¥–µ–ª–æ! üê±'
        await bot.reply_to(call.message, text)

    async def toTest(call):
        global redmine
        issueId = int(call.data.split(':')[1])
        issue = redmine.issue.get(issueId)
        
        custom_fields = list(issue.custom_fields.values())
        for field in custom_fields:
            if field["name"] == '–ö —Å–±–æ—Ä–∫–µ':
                field["value"] = 1

        redmine.issue.update(issueId,
            # 9 - id —Å—Ç–∞—Ç—É—Å "–¢–µ—Å—Ç"
            status_id=9,
            assigned_to_id=issue.author.id,
            done_ratio=100,
            notes="–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            custom_fields=custom_fields
        )

        text = f'–°—É–ø–µ—Ä! –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ü•∞'
        await bot.reply_to(call.message, text)

    if call.data.startswith('details'):
        return await showDetails(call)
    
    if call.data.startswith('toWork'):
        return await toWork(call)
    if call.data.startswith('toTest'):
        return await toTest(call)
        

bot.add_custom_filter(asyncio_filters.StateFilter(bot))
asyncio.run(bot.polling())
